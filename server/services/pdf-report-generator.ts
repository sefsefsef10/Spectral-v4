import PDFDocument from 'pdfkit';
import { Writable } from 'stream';

export interface ComplianceReportData {
  healthSystemName: string;
  reportType: string;
  periodStart: Date;
  periodEnd: Date;
  generatedAt: Date;
  generatedBy: string;
  
  // Executive Summary
  summary: {
    totalSystems: number;
    verifiedSystems: number;
    driftSystems: number;
    criticalSystems: number;
    averageComplianceRate: number;
    frameworks: string[];
  };
  
  // AI Systems with compliance details
  systems: Array<{
    name: string;
    department: string;
    riskLevel: string;
    status: string;
    complianceRate: number;
    frameworkScores: Array<{
      framework: string;
      compliant: number;
      total: number;
      rate: number;
    }>;
  }>;
  
  // Findings
  findings: Array<{
    severity: string;
    title: string;
    description: string;
    affectedSystems: string[];
  }>;
  
  // Recommendations
  recommendations: string[];
}

export class PDFReportGenerator {
  private doc: PDFKit.PDFDocument;
  private pageMargin = 50;
  private pageWidth = 612 - (this.pageMargin * 2); // Letter size
  
  constructor() {
    this.doc = new PDFDocument({
      size: 'LETTER',
      bufferPages: true, // Enable page buffering for footer generation
      margins: {
        top: this.pageMargin,
        bottom: this.pageMargin,
        left: this.pageMargin,
        right: this.pageMargin,
      },
    });
  }
  
  async generate(data: ComplianceReportData): Promise<Buffer> {
    return new Promise((resolve, reject) => {
      const chunks: Buffer[] = [];
      
      // Collect PDF data
      this.doc.on('data', (chunk) => chunks.push(chunk));
      this.doc.on('end', () => resolve(Buffer.concat(chunks)));
      this.doc.on('error', reject);
      
      // Generate PDF content
      this.addCoverPage(data);
      this.addExecutiveSummary(data);
      this.addSystemsOverview(data);
      this.addFindings(data);
      this.addRecommendations(data);
      this.addFooter(data);
      
      // Finalize PDF
      this.doc.end();
    });
  }
  
  private addCoverPage(data: ComplianceReportData) {
    // Header with gradient effect (simulated with rectangles)
    this.doc.rect(0, 0, 612, 200).fill('#667eea');
    
    // Title
    this.doc
      .fontSize(32)
      .fillColor('#ffffff')
      .font('Helvetica-Bold')
      .text('AI Compliance Report', this.pageMargin, 80, {
        align: 'center',
      });
    
    // Subtitle
    this.doc
      .fontSize(16)
      .fillColor('#ffffff')
      .font('Helvetica')
      .text(data.healthSystemName, this.pageMargin, 130, {
        align: 'center',
      });
    
    // Report metadata
    this.doc.fillColor('#111827');
    this.doc.moveDown(6);
    
    const metadataY = 280;
    this.doc
      .fontSize(12)
      .font('Helvetica-Bold')
      .text('Report Type:', this.pageMargin, metadataY)
      .font('Helvetica')
      .text(data.reportType, 200, metadataY);
    
    this.doc
      .font('Helvetica-Bold')
      .text('Period:', this.pageMargin, metadataY + 25)
      .font('Helvetica')
      .text(
        `${data.periodStart.toLocaleDateString()} - ${data.periodEnd.toLocaleDateString()}`,
        200,
        metadataY + 25
      );
    
    this.doc
      .font('Helvetica-Bold')
      .text('Generated:', this.pageMargin, metadataY + 50)
      .font('Helvetica')
      .text(data.generatedAt.toLocaleString(), 200, metadataY + 50);
    
    this.doc
      .font('Helvetica-Bold')
      .text('Generated By:', this.pageMargin, metadataY + 75)
      .font('Helvetica')
      .text(data.generatedBy, 200, metadataY + 75);
    
    // Spectral branding
    this.doc
      .fontSize(10)
      .fillColor('#6b7280')
      .font('Helvetica')
      .text('Powered by Spectral AI Governance Platform', this.pageMargin, 700, {
        align: 'center',
      });
    
    this.doc.addPage();
  }
  
  private addExecutiveSummary(data: ComplianceReportData) {
    this.doc
      .fontSize(20)
      .fillColor('#111827')
      .font('Helvetica-Bold')
      .text('Executive Summary', this.pageMargin, this.pageMargin);
    
    this.doc.moveDown(1);
    
    // Summary metrics in a grid
    const summary = data.summary;
    const startY = this.doc.y;
    const boxWidth = (this.pageWidth - 30) / 2;
    const boxHeight = 80;
    const spacing = 15;
    
    // Row 1
    this.drawMetricBox(
      this.pageMargin,
      startY,
      boxWidth,
      boxHeight,
      'Total AI Systems',
      summary.totalSystems.toString()
    );
    
    this.drawMetricBox(
      this.pageMargin + boxWidth + spacing,
      startY,
      boxWidth,
      boxHeight,
      'Verified Systems',
      summary.verifiedSystems.toString(),
      '#10b981'
    );
    
    // Row 2
    this.drawMetricBox(
      this.pageMargin,
      startY + boxHeight + spacing,
      boxWidth,
      boxHeight,
      'Systems with Drift',
      summary.driftSystems.toString(),
      '#f59e0b'
    );
    
    this.drawMetricBox(
      this.pageMargin + boxWidth + spacing,
      startY + boxHeight + spacing,
      boxWidth,
      boxHeight,
      'Critical Risk Systems',
      summary.criticalSystems.toString(),
      '#dc2626'
    );
    
    // Compliance rate
    this.doc.y = startY + (boxHeight * 2) + (spacing * 2) + 20;
    this.drawMetricBox(
      this.pageMargin,
      this.doc.y,
      this.pageWidth,
      boxHeight,
      'Average Compliance Rate',
      `${summary.averageComplianceRate}%`,
      summary.averageComplianceRate >= 80 ? '#10b981' : summary.averageComplianceRate >= 60 ? '#f59e0b' : '#dc2626'
    );
    
    // Frameworks covered
    this.doc.y += boxHeight + 30;
    this.doc
      .fontSize(14)
      .fillColor('#111827')
      .font('Helvetica-Bold')
      .text('Regulatory Frameworks Assessed', this.pageMargin, this.doc.y);
    
    this.doc.moveDown(0.5);
    summary.frameworks.forEach((framework) => {
      this.doc
        .fontSize(11)
        .fillColor('#374151')
        .font('Helvetica')
        .text(`â€¢ ${framework}`, this.pageMargin + 20, this.doc.y);
      this.doc.moveDown(0.3);
    });
    
    this.doc.addPage();
  }
  
  private drawMetricBox(
    x: number,
    y: number,
    width: number,
    height: number,
    label: string,
    value: string,
    color: string = '#667eea'
  ) {
    // Box background
    this.doc.rect(x, y, width, height).fill('#f9fafb');
    this.doc.rect(x, y, width, height).stroke('#e5e7eb');
    
    // Label
    this.doc
      .fontSize(10)
      .fillColor('#6b7280')
      .font('Helvetica')
      .text(label, x + 15, y + 15, { width: width - 30 });
    
    // Value
    this.doc
      .fontSize(28)
      .fillColor(color)
      .font('Helvetica-Bold')
      .text(value, x + 15, y + 35, { width: width - 30 });
  }
  
  private addSystemsOverview(data: ComplianceReportData) {
    this.doc
      .fontSize(20)
      .fillColor('#111827')
      .font('Helvetica-Bold')
      .text('AI Systems Portfolio', this.pageMargin, this.pageMargin);
    
    this.doc.moveDown(1);
    
    // Table header
    const tableY = this.doc.y;
    this.doc
      .fontSize(10)
      .fillColor('#ffffff')
      .font('Helvetica-Bold');
    
    this.doc.rect(this.pageMargin, tableY, this.pageWidth, 25).fill('#667eea');
    
    this.doc.text('System Name', this.pageMargin + 10, tableY + 8, { width: 150 });
    this.doc.text('Department', this.pageMargin + 170, tableY + 8, { width: 80 });
    this.doc.text('Risk', this.pageMargin + 260, tableY + 8, { width: 60 });
    this.doc.text('Status', this.pageMargin + 330, tableY + 8, { width: 60 });
    this.doc.text('Compliance', this.pageMargin + 400, tableY + 8, { width: 80 });
    
    // Table rows
    let rowY = tableY + 25;
    data.systems.forEach((system, index) => {
      // Alternate row colors
      const rowColor = index % 2 === 0 ? '#ffffff' : '#f9fafb';
      this.doc.rect(this.pageMargin, rowY, this.pageWidth, 30).fill(rowColor);
      
      this.doc
        .fontSize(9)
        .fillColor('#111827')
        .font('Helvetica')
        .text(system.name, this.pageMargin + 10, rowY + 10, { width: 150 });
      
      this.doc.text(system.department, this.pageMargin + 170, rowY + 10, { width: 80 });
      
      const riskColor = this.getRiskColor(system.riskLevel);
      this.doc.fillColor(riskColor).text(system.riskLevel, this.pageMargin + 260, rowY + 10);
      
      const statusColor = system.status === 'verified' ? '#10b981' : '#f59e0b';
      this.doc.fillColor(statusColor).text(system.status, this.pageMargin + 330, rowY + 10);
      
      this.doc
        .fillColor('#111827')
        .text(`${system.complianceRate}%`, this.pageMargin + 400, rowY + 10);
      
      rowY += 30;
      
      // Add new page if needed
      if (rowY > 700) {
        this.doc.addPage();
        rowY = this.pageMargin;
      }
    });
    
    this.doc.addPage();
  }
  
  private addFindings(data: ComplianceReportData) {
    this.doc
      .fontSize(20)
      .fillColor('#111827')
      .font('Helvetica-Bold')
      .text('Key Findings', this.pageMargin, this.pageMargin);
    
    this.doc.moveDown(1);
    
    if (data.findings.length === 0) {
      this.doc
        .fontSize(11)
        .fillColor('#6b7280')
        .font('Helvetica')
        .text('No significant findings to report.', this.pageMargin);
    } else {
      data.findings.forEach((finding, index) => {
        // Finding number and severity
        const severityColor = this.getSeverityColor(finding.severity);
        this.doc
          .fontSize(12)
          .fillColor(severityColor)
          .font('Helvetica-Bold')
          .text(`Finding ${index + 1}: ${finding.title}`, this.pageMargin, this.doc.y);
        
        this.doc.moveDown(0.3);
        
        // Severity badge
        this.doc
          .fontSize(9)
          .fillColor(severityColor)
          .font('Helvetica-Bold')
          .text(`[${finding.severity.toUpperCase()}]`, this.pageMargin + 20, this.doc.y);
        
        this.doc.moveDown(0.5);
        
        // Description
        this.doc
          .fontSize(10)
          .fillColor('#374151')
          .font('Helvetica')
          .text(finding.description, this.pageMargin + 20, this.doc.y, {
            width: this.pageWidth - 20,
          });
        
        this.doc.moveDown(0.3);
        
        // Affected systems
        if (finding.affectedSystems.length > 0) {
          this.doc
            .fontSize(9)
            .fillColor('#6b7280')
            .font('Helvetica-Bold')
            .text('Affected Systems:', this.pageMargin + 20, this.doc.y);
          
          this.doc
            .font('Helvetica')
            .text(finding.affectedSystems.join(', '), this.pageMargin + 30, this.doc.y, {
              width: this.pageWidth - 30,
            });
        }
        
        this.doc.moveDown(1.5);
        
        // Add new page if needed
        if (this.doc.y > 650) {
          this.doc.addPage();
        }
      });
    }
    
    this.doc.addPage();
  }
  
  private addRecommendations(data: ComplianceReportData) {
    this.doc
      .fontSize(20)
      .fillColor('#111827')
      .font('Helvetica-Bold')
      .text('Recommendations', this.pageMargin, this.pageMargin);
    
    this.doc.moveDown(1);
    
    if (data.recommendations.length === 0) {
      this.doc
        .fontSize(11)
        .fillColor('#6b7280')
        .font('Helvetica')
        .text('No specific recommendations at this time.', this.pageMargin);
    } else {
      data.recommendations.forEach((recommendation, index) => {
        this.doc
          .fontSize(11)
          .fillColor('#111827')
          .font('Helvetica-Bold')
          .text(`${index + 1}.`, this.pageMargin, this.doc.y);
        
        this.doc
          .font('Helvetica')
          .text(recommendation, this.pageMargin + 25, this.doc.y - 12, {
            width: this.pageWidth - 25,
          });
        
        this.doc.moveDown(0.8);
        
        // Add new page if needed
        if (this.doc.y > 680) {
          this.doc.addPage();
        }
      });
    }
  }
  
  private addFooter(data: ComplianceReportData) {
    const pageCount = (this.doc as any).bufferedPageRange().count;
    
    for (let i = 0; i < pageCount; i++) {
      this.doc.switchToPage(i);
      
      // Footer line
      this.doc.strokeColor('#e5e7eb').lineWidth(1);
      this.doc.moveTo(this.pageMargin, 750).lineTo(612 - this.pageMargin, 750).stroke();
      
      // Footer text
      this.doc
        .fontSize(8)
        .fillColor('#6b7280')
        .font('Helvetica')
        .text(
          `Spectral AI Governance Platform | ${data.healthSystemName}`,
          this.pageMargin,
          755,
          { align: 'left' }
        );
      
      this.doc.text(`Page ${i + 1} of ${pageCount}`, this.pageMargin, 755, {
        align: 'right',
      });
    }
  }
  
  private getRiskColor(riskLevel: string): string {
    switch (riskLevel.toLowerCase()) {
      case 'critical':
        return '#dc2626';
      case 'high':
        return '#f59e0b';
      case 'medium':
        return '#3b82f6';
      case 'low':
        return '#10b981';
      default:
        return '#6b7280';
    }
  }
  
  private getSeverityColor(severity: string): string {
    switch (severity.toLowerCase()) {
      case 'critical':
        return '#dc2626';
      case 'high':
        return '#f59e0b';
      case 'medium':
        return '#3b82f6';
      case 'low':
        return '#10b981';
      default:
        return '#6b7280';
    }
  }
}

// Helper function to generate compliance report
export async function generateComplianceReport(
  reportData: ComplianceReportData
): Promise<Buffer> {
  const generator = new PDFReportGenerator();
  return generator.generate(reportData);
}
